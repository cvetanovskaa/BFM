# This must come first in this particular file.
from flask import Flask
from flask import session, redirect, url_for, abort
from flask_session import Session
from flask_mail import Mail
from flask import render_template
import os

app = Flask(__name__)
sess = Session()

def getMailer():
  return mail
  
# Import all of the controllers for your application
from application.controllers import *
from application.config import config
from application.logic.validation import tokenOk

@app.errorhandler(403)
def errorhandler(e):
    return render_template('views/errors/403.html', config = config), 403
    
@app.errorhandler(404)
def errorhandler(e):
    return render_template('views/errors/404.html', config = config), 404

try:
  if not os.getenv("HANDINLOCAL"):
    from application.config import secret
    app.config['MAIL_SERVER']   = 'smtp.googlemail.com'
    app.config['MAIL_PORT']     = 465
    app.config['MAIL_USE_TLS']  = False
    app.config['MAIL_USE_SSL']  = True
    app.config['MAIL_USERNAME'] = secret.mail.username
    app.config['MAIL_PASSWORD'] = secret.mail.password
  mail = Mail(app)
except Exception as e:
  print e
  pass
# We need to track session information for using the 
# admin console. This is not fully understood yet.
# The admin console does not work without it, though.
import uuid
if config.flask.secretKey in ["UUID", "RANDOM"]:
  app.secret_key = uuid.uuid4()
else:
  app.secret_key = "secretsecretsecret"

app.config['SESSION_TYPE'] = 'filesystem'
sess.init_app(app)

# Set up the administrative interface
import flask_admin as admin
from flask_admin import expose
from flask_admin.contrib.peewee import ModelView


class RoleVerifiedAdminIndexView(admin.AdminIndexView):
    @expose('/')
    def index(self):
      if doesUserHaveRole("admin"):
        # print "Role Verified"
        return super(RoleVerifiedAdminIndexView, self).index()
      else:
        # print "No Role Verified"
        return redirect("/", code = 302)

admin = admin.Admin(app, 
                    name = config.application.title, 
                    index_view = RoleVerifiedAdminIndexView(),
                    template_mode = 'bootstrap3')
from application.models import classes
for c in classes:
  # print "Adding ModelView to {0}".format(c)
  admin.add_view(ModelView(c))

# Store the username (which will have been set by the webserver)
# into the config. 
# FIXME: This is temporary. Fix with proper code for running
# under Apache/Shibboleth
import os
'''
TODO: Set the username for flask off of the email in validation
'''
# from application.logic.validation import getUsernameFromEnv as gUFE
# config.flask.username = gUFE()



# This hook ensures that a connection is opened to handle any queries
# generated by the request. Opens every database, which is not ideal,
# but because we don't know which will be used...
@app.before_request
def _db_connect():
  for db in config.databases:
    theDB = config.databases[db].theDB
    theDB.connect()

# This hook ensures that the connection is closed when we've finished
# processing the request.
@app.teardown_appcontext
def _db_close(exc):
  for db in config.databases:
    theDB = config.databases[db].theDB
    if not theDB.is_closed():
        theDB.close()
